// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class ChatConfigurationRequest {
  ChatConfigurationRequest({
    required this.urlChat,
    required this.urlOfflineForm,
    required this.urlToSendFile,
    required this.companyId,
    required this.channelId,
    this.clientEmail,
    this.clientName,
    this.clientPhoneNumber,
    this.clientAdditionalId,
    this.clientInitMessage,
  });

  String urlChat;
  String urlOfflineForm;
  String urlToSendFile;
  String companyId;
  String channelId;
  String? clientEmail;
  String? clientName;
  int? clientPhoneNumber;
  String? clientAdditionalId;
  String? clientInitMessage;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['urlChat'] = urlChat;
    pigeonMap['urlOfflineForm'] = urlOfflineForm;
    pigeonMap['urlToSendFile'] = urlToSendFile;
    pigeonMap['companyId'] = companyId;
    pigeonMap['channelId'] = channelId;
    pigeonMap['clientEmail'] = clientEmail;
    pigeonMap['clientName'] = clientName;
    pigeonMap['clientPhoneNumber'] = clientPhoneNumber;
    pigeonMap['clientAdditionalId'] = clientAdditionalId;
    pigeonMap['clientInitMessage'] = clientInitMessage;
    return pigeonMap;
  }

  static ChatConfigurationRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChatConfigurationRequest(
      urlChat: pigeonMap['urlChat']! as String,
      urlOfflineForm: pigeonMap['urlOfflineForm']! as String,
      urlToSendFile: pigeonMap['urlToSendFile']! as String,
      companyId: pigeonMap['companyId']! as String,
      channelId: pigeonMap['channelId']! as String,
      clientEmail: pigeonMap['clientEmail'] as String?,
      clientName: pigeonMap['clientName'] as String?,
      clientPhoneNumber: pigeonMap['clientPhoneNumber'] as int?,
      clientAdditionalId: pigeonMap['clientAdditionalId'] as String?,
      clientInitMessage: pigeonMap['clientInitMessage'] as String?,
    );
  }
}

class ChatReleaseRequest {
  ChatReleaseRequest({
    required this.force,
  });

  bool force;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['force'] = force;
    return pigeonMap;
  }

  static ChatReleaseRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChatReleaseRequest(
      force: pigeonMap['force']! as bool,
    );
  }
}

class ChatSendMessageRequest {
  ChatSendMessageRequest({
    required this.text,
  });

  String text;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['text'] = text;
    return pigeonMap;
  }

  static ChatSendMessageRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ChatSendMessageRequest(
      text: pigeonMap['text']! as String,
    );
  }
}

class _UsedeskApiCodec extends StandardMessageCodec {
  const _UsedeskApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ChatConfigurationRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ChatReleaseRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is ChatSendMessageRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ChatConfigurationRequest.decode(readValue(buffer)!);
      
      case 129:       
        return ChatReleaseRequest.decode(readValue(buffer)!);
      
      case 130:       
        return ChatSendMessageRequest.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class UsedeskApi {
  /// Constructor for [UsedeskApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UsedeskApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _UsedeskApiCodec();

  Future<void> chatConfigure(ChatConfigurationRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UsedeskApi.chatConfigure', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> chatInit() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UsedeskApi.chatInit', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> chatRelease(ChatReleaseRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UsedeskApi.chatRelease', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> chatStartNotificationService() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UsedeskApi.chatStartNotificationService', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> chatStopNotificationService() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UsedeskApi.chatStopNotificationService', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> chatSendMessage(ChatSendMessageRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UsedeskApi.chatSendMessage', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
