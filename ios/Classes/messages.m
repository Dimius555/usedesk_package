// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface ChatConfigurationRequest ()
+ (ChatConfigurationRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ChatReleaseRequest ()
+ (ChatReleaseRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ChatSendMessageRequest ()
+ (ChatSendMessageRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation ChatConfigurationRequest
+ (instancetype)makeWithUrlChat:(NSString *)urlChat
    urlOfflineForm:(NSString *)urlOfflineForm
    urlToSendFile:(NSString *)urlToSendFile
    companyId:(NSString *)companyId
    channelId:(NSString *)channelId
    clientEmail:(nullable NSString *)clientEmail
    clientName:(nullable NSString *)clientName
    clientPhoneNumber:(nullable NSNumber *)clientPhoneNumber
    clientAdditionalId:(nullable NSString *)clientAdditionalId
    clientInitMessage:(nullable NSString *)clientInitMessage {
  ChatConfigurationRequest* pigeonResult = [[ChatConfigurationRequest alloc] init];
  pigeonResult.urlChat = urlChat;
  pigeonResult.urlOfflineForm = urlOfflineForm;
  pigeonResult.urlToSendFile = urlToSendFile;
  pigeonResult.companyId = companyId;
  pigeonResult.channelId = channelId;
  pigeonResult.clientEmail = clientEmail;
  pigeonResult.clientName = clientName;
  pigeonResult.clientPhoneNumber = clientPhoneNumber;
  pigeonResult.clientAdditionalId = clientAdditionalId;
  pigeonResult.clientInitMessage = clientInitMessage;
  return pigeonResult;
}
+ (ChatConfigurationRequest *)fromMap:(NSDictionary *)dict {
  ChatConfigurationRequest *pigeonResult = [[ChatConfigurationRequest alloc] init];
  pigeonResult.urlChat = GetNullableObject(dict, @"urlChat");
  NSAssert(pigeonResult.urlChat != nil, @"");
  pigeonResult.urlOfflineForm = GetNullableObject(dict, @"urlOfflineForm");
  NSAssert(pigeonResult.urlOfflineForm != nil, @"");
  pigeonResult.urlToSendFile = GetNullableObject(dict, @"urlToSendFile");
  NSAssert(pigeonResult.urlToSendFile != nil, @"");
  pigeonResult.companyId = GetNullableObject(dict, @"companyId");
  NSAssert(pigeonResult.companyId != nil, @"");
  pigeonResult.channelId = GetNullableObject(dict, @"channelId");
  NSAssert(pigeonResult.channelId != nil, @"");
  pigeonResult.clientEmail = GetNullableObject(dict, @"clientEmail");
  pigeonResult.clientName = GetNullableObject(dict, @"clientName");
  pigeonResult.clientPhoneNumber = GetNullableObject(dict, @"clientPhoneNumber");
  pigeonResult.clientAdditionalId = GetNullableObject(dict, @"clientAdditionalId");
  pigeonResult.clientInitMessage = GetNullableObject(dict, @"clientInitMessage");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.urlChat ? self.urlChat : [NSNull null]), @"urlChat", (self.urlOfflineForm ? self.urlOfflineForm : [NSNull null]), @"urlOfflineForm", (self.urlToSendFile ? self.urlToSendFile : [NSNull null]), @"urlToSendFile", (self.companyId ? self.companyId : [NSNull null]), @"companyId", (self.channelId ? self.channelId : [NSNull null]), @"channelId", (self.clientEmail ? self.clientEmail : [NSNull null]), @"clientEmail", (self.clientName ? self.clientName : [NSNull null]), @"clientName", (self.clientPhoneNumber ? self.clientPhoneNumber : [NSNull null]), @"clientPhoneNumber", (self.clientAdditionalId ? self.clientAdditionalId : [NSNull null]), @"clientAdditionalId", (self.clientInitMessage ? self.clientInitMessage : [NSNull null]), @"clientInitMessage", nil];
}
@end

@implementation ChatReleaseRequest
+ (instancetype)makeWithForce:(NSNumber *)force {
  ChatReleaseRequest* pigeonResult = [[ChatReleaseRequest alloc] init];
  pigeonResult.force = force;
  return pigeonResult;
}
+ (ChatReleaseRequest *)fromMap:(NSDictionary *)dict {
  ChatReleaseRequest *pigeonResult = [[ChatReleaseRequest alloc] init];
  pigeonResult.force = GetNullableObject(dict, @"force");
  NSAssert(pigeonResult.force != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.force ? self.force : [NSNull null]), @"force", nil];
}
@end

@implementation ChatSendMessageRequest
+ (instancetype)makeWithText:(NSString *)text {
  ChatSendMessageRequest* pigeonResult = [[ChatSendMessageRequest alloc] init];
  pigeonResult.text = text;
  return pigeonResult;
}
+ (ChatSendMessageRequest *)fromMap:(NSDictionary *)dict {
  ChatSendMessageRequest *pigeonResult = [[ChatSendMessageRequest alloc] init];
  pigeonResult.text = GetNullableObject(dict, @"text");
  NSAssert(pigeonResult.text != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.text ? self.text : [NSNull null]), @"text", nil];
}
@end

@interface UsedeskApiCodecReader : FlutterStandardReader
@end
@implementation UsedeskApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [ChatConfigurationRequest fromMap:[self readValue]];
    
    case 129:     
      return [ChatReleaseRequest fromMap:[self readValue]];
    
    case 130:     
      return [ChatSendMessageRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface UsedeskApiCodecWriter : FlutterStandardWriter
@end
@implementation UsedeskApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[ChatConfigurationRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ChatReleaseRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ChatSendMessageRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface UsedeskApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation UsedeskApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[UsedeskApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[UsedeskApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *UsedeskApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    UsedeskApiCodecReaderWriter *readerWriter = [[UsedeskApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void UsedeskApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<UsedeskApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UsedeskApi.chatConfigure"
        binaryMessenger:binaryMessenger
        codec:UsedeskApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(chatConfigureRequest:error:)], @"UsedeskApi api (%@) doesn't respond to @selector(chatConfigureRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ChatConfigurationRequest *arg_request = args[0];
        FlutterError *error;
        [api chatConfigureRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UsedeskApi.chatInit"
        binaryMessenger:binaryMessenger
        codec:UsedeskApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(chatInitWithError:)], @"UsedeskApi api (%@) doesn't respond to @selector(chatInitWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api chatInitWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UsedeskApi.chatRelease"
        binaryMessenger:binaryMessenger
        codec:UsedeskApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(chatReleaseRequest:error:)], @"UsedeskApi api (%@) doesn't respond to @selector(chatReleaseRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ChatReleaseRequest *arg_request = args[0];
        FlutterError *error;
        [api chatReleaseRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UsedeskApi.chatStartNotificationService"
        binaryMessenger:binaryMessenger
        codec:UsedeskApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(chatStartNotificationServiceWithError:)], @"UsedeskApi api (%@) doesn't respond to @selector(chatStartNotificationServiceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api chatStartNotificationServiceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UsedeskApi.chatStopNotificationService"
        binaryMessenger:binaryMessenger
        codec:UsedeskApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(chatStopNotificationServiceWithError:)], @"UsedeskApi api (%@) doesn't respond to @selector(chatStopNotificationServiceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api chatStopNotificationServiceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UsedeskApi.chatSendMessage"
        binaryMessenger:binaryMessenger
        codec:UsedeskApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(chatSendMessageRequest:error:)], @"UsedeskApi api (%@) doesn't respond to @selector(chatSendMessageRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ChatSendMessageRequest *arg_request = args[0];
        FlutterError *error;
        [api chatSendMessageRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
