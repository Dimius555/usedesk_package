// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ChatConfigurationRequest {
    private @NonNull String urlChat;
    public @NonNull String getUrlChat() { return urlChat; }
    public void setUrlChat(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"urlChat\" is null.");
      }
      this.urlChat = setterArg;
    }

    private @NonNull String urlOfflineForm;
    public @NonNull String getUrlOfflineForm() { return urlOfflineForm; }
    public void setUrlOfflineForm(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"urlOfflineForm\" is null.");
      }
      this.urlOfflineForm = setterArg;
    }

    private @NonNull String urlToSendFile;
    public @NonNull String getUrlToSendFile() { return urlToSendFile; }
    public void setUrlToSendFile(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"urlToSendFile\" is null.");
      }
      this.urlToSendFile = setterArg;
    }

    private @NonNull String companyId;
    public @NonNull String getCompanyId() { return companyId; }
    public void setCompanyId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"companyId\" is null.");
      }
      this.companyId = setterArg;
    }

    private @NonNull String channelId;
    public @NonNull String getChannelId() { return channelId; }
    public void setChannelId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"channelId\" is null.");
      }
      this.channelId = setterArg;
    }

    private @Nullable String clientEmail;
    public @Nullable String getClientEmail() { return clientEmail; }
    public void setClientEmail(@Nullable String setterArg) {
      this.clientEmail = setterArg;
    }

    private @Nullable String clientName;
    public @Nullable String getClientName() { return clientName; }
    public void setClientName(@Nullable String setterArg) {
      this.clientName = setterArg;
    }

    private @Nullable Long clientPhoneNumber;
    public @Nullable Long getClientPhoneNumber() { return clientPhoneNumber; }
    public void setClientPhoneNumber(@Nullable Long setterArg) {
      this.clientPhoneNumber = setterArg;
    }

    private @Nullable String clientAdditionalId;
    public @Nullable String getClientAdditionalId() { return clientAdditionalId; }
    public void setClientAdditionalId(@Nullable String setterArg) {
      this.clientAdditionalId = setterArg;
    }

    private @Nullable String clientInitMessage;
    public @Nullable String getClientInitMessage() { return clientInitMessage; }
    public void setClientInitMessage(@Nullable String setterArg) {
      this.clientInitMessage = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ChatConfigurationRequest() {}
    public static class Builder {
      private @Nullable String urlChat;
      public @NonNull Builder setUrlChat(@NonNull String setterArg) {
        this.urlChat = setterArg;
        return this;
      }
      private @Nullable String urlOfflineForm;
      public @NonNull Builder setUrlOfflineForm(@NonNull String setterArg) {
        this.urlOfflineForm = setterArg;
        return this;
      }
      private @Nullable String urlToSendFile;
      public @NonNull Builder setUrlToSendFile(@NonNull String setterArg) {
        this.urlToSendFile = setterArg;
        return this;
      }
      private @Nullable String companyId;
      public @NonNull Builder setCompanyId(@NonNull String setterArg) {
        this.companyId = setterArg;
        return this;
      }
      private @Nullable String channelId;
      public @NonNull Builder setChannelId(@NonNull String setterArg) {
        this.channelId = setterArg;
        return this;
      }
      private @Nullable String clientEmail;
      public @NonNull Builder setClientEmail(@Nullable String setterArg) {
        this.clientEmail = setterArg;
        return this;
      }
      private @Nullable String clientName;
      public @NonNull Builder setClientName(@Nullable String setterArg) {
        this.clientName = setterArg;
        return this;
      }
      private @Nullable Long clientPhoneNumber;
      public @NonNull Builder setClientPhoneNumber(@Nullable Long setterArg) {
        this.clientPhoneNumber = setterArg;
        return this;
      }
      private @Nullable String clientAdditionalId;
      public @NonNull Builder setClientAdditionalId(@Nullable String setterArg) {
        this.clientAdditionalId = setterArg;
        return this;
      }
      private @Nullable String clientInitMessage;
      public @NonNull Builder setClientInitMessage(@Nullable String setterArg) {
        this.clientInitMessage = setterArg;
        return this;
      }
      public @NonNull ChatConfigurationRequest build() {
        ChatConfigurationRequest pigeonReturn = new ChatConfigurationRequest();
        pigeonReturn.setUrlChat(urlChat);
        pigeonReturn.setUrlOfflineForm(urlOfflineForm);
        pigeonReturn.setUrlToSendFile(urlToSendFile);
        pigeonReturn.setCompanyId(companyId);
        pigeonReturn.setChannelId(channelId);
        pigeonReturn.setClientEmail(clientEmail);
        pigeonReturn.setClientName(clientName);
        pigeonReturn.setClientPhoneNumber(clientPhoneNumber);
        pigeonReturn.setClientAdditionalId(clientAdditionalId);
        pigeonReturn.setClientInitMessage(clientInitMessage);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("urlChat", urlChat);
      toMapResult.put("urlOfflineForm", urlOfflineForm);
      toMapResult.put("urlToSendFile", urlToSendFile);
      toMapResult.put("companyId", companyId);
      toMapResult.put("channelId", channelId);
      toMapResult.put("clientEmail", clientEmail);
      toMapResult.put("clientName", clientName);
      toMapResult.put("clientPhoneNumber", clientPhoneNumber);
      toMapResult.put("clientAdditionalId", clientAdditionalId);
      toMapResult.put("clientInitMessage", clientInitMessage);
      return toMapResult;
    }
    static @NonNull ChatConfigurationRequest fromMap(@NonNull Map<String, Object> map) {
      ChatConfigurationRequest pigeonResult = new ChatConfigurationRequest();
      Object urlChat = map.get("urlChat");
      pigeonResult.setUrlChat((String)urlChat);
      Object urlOfflineForm = map.get("urlOfflineForm");
      pigeonResult.setUrlOfflineForm((String)urlOfflineForm);
      Object urlToSendFile = map.get("urlToSendFile");
      pigeonResult.setUrlToSendFile((String)urlToSendFile);
      Object companyId = map.get("companyId");
      pigeonResult.setCompanyId((String)companyId);
      Object channelId = map.get("channelId");
      pigeonResult.setChannelId((String)channelId);
      Object clientEmail = map.get("clientEmail");
      pigeonResult.setClientEmail((String)clientEmail);
      Object clientName = map.get("clientName");
      pigeonResult.setClientName((String)clientName);
      Object clientPhoneNumber = map.get("clientPhoneNumber");
      pigeonResult.setClientPhoneNumber((clientPhoneNumber == null) ? null : ((clientPhoneNumber instanceof Integer) ? (Integer)clientPhoneNumber : (Long)clientPhoneNumber));
      Object clientAdditionalId = map.get("clientAdditionalId");
      pigeonResult.setClientAdditionalId((String)clientAdditionalId);
      Object clientInitMessage = map.get("clientInitMessage");
      pigeonResult.setClientInitMessage((String)clientInitMessage);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ChatReleaseRequest {
    private @NonNull Boolean force;
    public @NonNull Boolean getForce() { return force; }
    public void setForce(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"force\" is null.");
      }
      this.force = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ChatReleaseRequest() {}
    public static class Builder {
      private @Nullable Boolean force;
      public @NonNull Builder setForce(@NonNull Boolean setterArg) {
        this.force = setterArg;
        return this;
      }
      public @NonNull ChatReleaseRequest build() {
        ChatReleaseRequest pigeonReturn = new ChatReleaseRequest();
        pigeonReturn.setForce(force);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("force", force);
      return toMapResult;
    }
    static @NonNull ChatReleaseRequest fromMap(@NonNull Map<String, Object> map) {
      ChatReleaseRequest pigeonResult = new ChatReleaseRequest();
      Object force = map.get("force");
      pigeonResult.setForce((Boolean)force);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ChatSendMessageRequest {
    private @NonNull String text;
    public @NonNull String getText() { return text; }
    public void setText(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"text\" is null.");
      }
      this.text = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ChatSendMessageRequest() {}
    public static class Builder {
      private @Nullable String text;
      public @NonNull Builder setText(@NonNull String setterArg) {
        this.text = setterArg;
        return this;
      }
      public @NonNull ChatSendMessageRequest build() {
        ChatSendMessageRequest pigeonReturn = new ChatSendMessageRequest();
        pigeonReturn.setText(text);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("text", text);
      return toMapResult;
    }
    static @NonNull ChatSendMessageRequest fromMap(@NonNull Map<String, Object> map) {
      ChatSendMessageRequest pigeonResult = new ChatSendMessageRequest();
      Object text = map.get("text");
      pigeonResult.setText((String)text);
      return pigeonResult;
    }
  }
  private static class UsedeskApiCodec extends StandardMessageCodec {
    public static final UsedeskApiCodec INSTANCE = new UsedeskApiCodec();
    private UsedeskApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ChatConfigurationRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ChatReleaseRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ChatSendMessageRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ChatConfigurationRequest) {
        stream.write(128);
        writeValue(stream, ((ChatConfigurationRequest) value).toMap());
      } else 
      if (value instanceof ChatReleaseRequest) {
        stream.write(129);
        writeValue(stream, ((ChatReleaseRequest) value).toMap());
      } else 
      if (value instanceof ChatSendMessageRequest) {
        stream.write(130);
        writeValue(stream, ((ChatSendMessageRequest) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface UsedeskApi {
    @NonNull void chatConfigure(ChatConfigurationRequest request);
    @NonNull void chatInit();
    @NonNull void chatRelease(ChatReleaseRequest request);
    @NonNull void chatStartNotificationService();
    @NonNull void chatStopNotificationService();
    @NonNull void chatSendMessage(ChatSendMessageRequest request);

    /** The codec used by UsedeskApi. */
    static MessageCodec<Object> getCodec() {
      return UsedeskApiCodec.INSTANCE;
    }

    /** Sets up an instance of `UsedeskApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, UsedeskApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UsedeskApi.chatConfigure", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ChatConfigurationRequest requestArg = (ChatConfigurationRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.chatConfigure(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UsedeskApi.chatInit", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.chatInit();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UsedeskApi.chatRelease", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ChatReleaseRequest requestArg = (ChatReleaseRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.chatRelease(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UsedeskApi.chatStartNotificationService", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.chatStartNotificationService();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UsedeskApi.chatStopNotificationService", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.chatStopNotificationService();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UsedeskApi.chatSendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ChatSendMessageRequest requestArg = (ChatSendMessageRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.chatSendMessage(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
